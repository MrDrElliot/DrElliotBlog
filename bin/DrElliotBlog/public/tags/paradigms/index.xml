<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paradigms on Dr. Elliot</title>
    <link>https://www.dr-elliot.com/tags/paradigms/</link>
    <description>Recent content in Paradigms on Dr. Elliot</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.dr-elliot.com/tags/paradigms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Cast Scare</title>
      <link>https://www.dr-elliot.com/posts/optimization/thecastscare/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://www.dr-elliot.com/posts/optimization/thecastscare/</guid>
      <description>Hello! Today I wanted to talk a little bit about casting, primarily Blueprint casting. The main reason I wanted to bring this up is because it&amp;rsquo;s one of the most misunderstood and blown-out-of-proportion concepts in Unreal Engine. There&amp;rsquo;s no shortage of YouTube videos with clickbait titles like &amp;ldquo;Casting is so bad, NEVER use it in your games!&amp;rdquo; (or some variation of that). This highlights a larger problem: people creating tutorials when they have no business doing so.</description>
    </item>
    <item>
      <title>Overuse of Inheritence.</title>
      <link>https://www.dr-elliot.com/posts/general/inheritenceoveruse/</link>
      <pubDate>Fri, 16 Aug 2024 13:46:48 -0500</pubDate>
      <guid>https://www.dr-elliot.com/posts/general/inheritenceoveruse/</guid>
      <description>Inheritance in object-oriented programming (OOP) is a fundamental concept that is deeply embedded in the design of Unreal Engine, and in many cases, it&amp;rsquo;s an elegant and powerful tool. However, like any tool, it can be overused, leading developers into a trap that can complicate development and maintenance in the long run.&#xA;The Trap of Overusing Inheritance Inheritance is often the go-to solution for sharing functionality across different classes. While it provides a straightforward way to extend and modify behavior, over-relying on it can lead to a rigid and tightly coupled codebase.</description>
    </item>
  </channel>
</rss>
